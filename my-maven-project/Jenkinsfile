pipeline {
    agent {
        docker {
            image 'maven:3.8.4-openjdk-11' // Using a Maven Docker image with OpenJDK
            args '--privileged' // Optional: If you need additional privileges for certain actions
        }
    }
    
    environment {
        // Credentials ID for Docker Hub (if applicable)
        DOCKER_HUB_CREDENTIALS_ID = "docker-credential-id"  // Credentials ID in Jenkins
    }

    stages {
        stage('Initialize') {
            steps {
                script {
                    // Initialize Docker tool in Jenkins (This is optional if Docker is already configured in the container)
                    def dockerHome = tool 'Docker'  // Ensure 'Docker' is configured in Jenkins' Global Tool Configuration
                    env.PATH = "${dockerHome}/bin:${env.PATH}"
                    echo "Docker initialized. PATH is updated."
                }
            }
        }

        stage('Checkout') {
            steps {
                // Checkout the code from GitHub repository
                git branch: 'main', url: 'https://github.com/akhil2099/maven-demo.git'
            }
        }

        stage('Build with Maven') {
            steps {
                // Build the project using Maven
                script {
                    sh 'mvn clean install'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Run SonarQube analysis using Maven
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                // Run tests with Maven (optional)
                script {
                    sh 'mvn test'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Wait for SonarQube quality gate result
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        waitForQualityGate abortPipeline: true
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and SonarQube analysis completed successfully.'
        }

        failure {
            echo 'Build or SonarQube analysis failed.'
        }
    }
}

